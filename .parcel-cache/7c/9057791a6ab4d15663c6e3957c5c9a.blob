"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadRecipe = exports.state = void 0;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this, args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
var state = {
  recipe: {}
};
exports.state = state;
var loadRecipe = /*#__PURE__*/(function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(id) {
    var res, data, recipe;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return fetch(("https://forkify-api.herokuapp.com/api/v2/recipes/").concat(id));
          case 3:
            res = _context.sent;
            _context.next = 6;
            return res.json();
          case 6:
            data = _context.sent;
            if (res.ok) {
              _context.next = 9;
              break;
            }
            throw new Error(("").concat(data.message, " (").concat(res.status, ")"));
          case 9:
            recipe = data.data.recipe;
            state.recipe = {
              id: recipe.id,
              title: recipe.title,
              publisher: recipe.publisher,
              sourceUrl: recipe.source_url,
              image: recipe.image_url,
              servings: recipe.servings,
              cookingTime: recipe.cooking_time,
              ingredients: recipe.ingredients
            };
            _context.next = 16;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](0);
            alert(_context.t0);
          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 13]]);
  }));
  return function loadRecipe(_x) {
    return _ref.apply(this, arguments);
  };
})();
exports.loadRecipe = loadRecipe;
